Eamon Tracey
Distributed Systems Assignment 3
-----
CHECKPOINT AND LOG FILES

The updated version of SpreadSheetServer can recover the previous state of the spreadsheet after crash. The server keeps a transaction log in a file, sheet.log, that records ordered insert and remove operations. Every 100 insert/remove operations, the spreadsheet is dumped to a checkpoint file, sheet.ckpt, and the log is truncated to 0. Note if the server crashes after the checkpoint is dumped but before the log is truncated, recovery remains successful since insert and remove operations are idempotent.

The checkpoint file is created using Python's built-in pickle library. The implementation uses pickle's binary format to serialize the SpreadSheet object to a file. Since the binary format is not friendly to this text file, I instead present an example checkpoint file using pickle's human-readable protocol. The following example shows the sheet.ckpt corresponding to a hydrated 3x3 spreadsheet checkpoint with 9 dictionaries of the form {"value": <random integer>}:

sheet.ckpt
```ccopy_reg
_reconstructor
p0
(cSpreadSheet
SpreadSheet
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
V_data
p6
(dp7
(I1
I1
tp8
(dp9
Vvalue
p10
I45
ss(I1
I2
tp11
(dp12
Vvalue
p13
I88
ss(I1
I3
tp14
(dp15
Vvalue
p16
I46
ss(I2
I1
tp17
(dp18
Vvalue
p19
I44
ss(I2
I2
tp20
(dp21
Vvalue
p22
I40
ss(I2
I3
tp23
(dp24
Vvalue
p25
I33
ss(I3
I1
tp26
(dp27
Vvalue
p28
I85
ss(I3
I2
tp29
(dp30
Vvalue
p31
I35
ss(I3
I3
tp32
(dp33
Vvalue
p34
I55
sssb.```

Similarly, the server simply serializes (using pickle) the payload sent by the client and appends it to the log file. The server appends to sheet.log only when the client sends a valid insert or remove operation. Again, the implementation uses pickle's binary format, but the example below uses pickle's human-readable protocol. The following example shows the sheet.log corresponding to 9 inserts of {"value": <random integer>} and 9 removes:

sheet.log
```(dp0
Vfunction
p1
Vinsert
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I4
sVvalue
p7
(dp8
g7
I25
sss.(dp0
Vfunction
p1
Vinsert
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I4
sVvalue
p7
(dp8
g7
I28
sss.(dp0
Vfunction
p1
Vinsert
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I4
sVvalue
p7
(dp8
g7
I50
sss.(dp0
Vfunction
p1
Vinsert
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I4
sVvalue
p7
(dp8
g7
I71
sss.(dp0
Vfunction
p1
Vinsert
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I4
sVvalue
p7
(dp8
g7
I100
sss.(dp0
Vfunction
p1
Vinsert
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I4
sVvalue
p7
(dp8
g7
I61
sss.(dp0
Vfunction
p1
Vinsert
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I4
sVvalue
p7
(dp8
g7
I68
sss.(dp0
Vfunction
p1
Vinsert
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I4
sVvalue
p7
(dp8
g7
I77
sss.(dp0
Vfunction
p1
Vinsert
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I4
sVvalue
p7
(dp8
g7
I65
sss.(dp0
Vfunction
p1
Vremove
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I1
ss.(dp0
Vfunction
p1
Vremove
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I2
ss.(dp0
Vfunction
p1
Vremove
p2
sVarguments
p3
(dp4
Vrow
p5
I1
sVcol
p6
I3
ss.(dp0
Vfunction
p1
Vremove
p2
sVarguments
p3
(dp4
Vrow
p5
I2
sVcol
p6
I1
ss.(dp0
Vfunction
p1
Vremove
p2
sVarguments
p3
(dp4
Vrow
p5
I2
sVcol
p6
I2
ss.(dp0
Vfunction
p1
Vremove
p2
sVarguments
p3
(dp4
Vrow
p5
I2
sVcol
p6
I3
ss.(dp0
Vfunction
p1
Vremove
p2
sVarguments
p3
(dp4
Vrow
p5
I3
sVcol
p6
I1
ss.(dp0
Vfunction
p1
Vremove
p2
sVarguments
p3
(dp4
Vrow
p5
I3
sVcol
p6
I2
ss.(dp0
Vfunction
p1
Vremove
p2
sVarguments
p3
(dp4
Vrow
p5
I3
sVcol
p6
I3
ss.```

-----
SUMMARY OF TestPerf.py

The TestPerf.py script measures the throughput and latency of the five spreadsheet operations (insert, lookup, query, remove, size). The script connects a spreadsheet client to a spreadsheet server and performs each operation 625 times in a hydrated 25x25 spreadsheet.

I ran `python3 SpreadSheetServer.py 12345` on student10.cse.nd.edu and ran `python3 TestPerf.py student10.cse.nd.edu 12345` on student11.cse.nd.edu. The results are below:

Insert (625)
    Time (s): 53.65703082084656
    Throughput (ops/s): 11.648054140132894
    Latency (s): 0.08585124931335449
Lookup (625)
    Time (s): 51.89483833312988
    Throughput (ops/s): 12.043586993911056
    Latency (s): 0.08303174133300781
Query (625)
    Time (s): 26.886511087417603
    Throughput (ops/s): 23.24585729877346
    Latency (s): 0.04301841773986816
Remove (625)
    Time (s): 53.97260236740112
    Throughput (ops/s): 11.579949318461868
    Latency (s): 0.08635616378784179
Size (625)
    Time (s): 51.86594223976135
    Throughput (ops/s): 12.050296842401986
    Latency (s): 0.08298550758361817
-----
SUMMARY OF TestOutliers.py

The TestOutliers.py script measures individual insert and remove operations, tracking the minimum, maximum, and average times of each operation. Each operation is performed 625 times. We expect there to be a large difference between the maximum and minimum times for each operation since some operations (every 100th) must wait for the server to dump the spreadsheet to a checkpoint file.


I ran `python3 SpreadSheetServer.py 12345` on student10.cse.nd.edu and ran `python3 TestOutliers.py student10.cse.nd.edu 12345` on student11.cse.nd.edu. The results are below:

Insert (625)
    Minimum Time (s): 0.0033540725708007812
    Maximum Time (s): 0.30673956871032715
    Average Time (s): 0.08691693801879882
Remove (625)
    Minimum Time (s): 0.043005943298339844
    Maximum Time (s): 0.3968193531036377
    Average Time (s): 0.08537205963134765
-----
SIGNIFICANCE OF RESULTS
